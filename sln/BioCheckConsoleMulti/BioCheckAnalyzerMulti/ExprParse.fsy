// Expr{Parse,Lex} generated by
//$ /cygdrive/c/Program\ Files/FSharpPowerPack-2.0.0.0/bin/fslex.exe --unicode ExprLex.fsl &&
//  /cygdrive/c/Program\ Files/FSharpPowerPack-2.0.0.0/bin/fsyacc.exe --module ExprParse ExprParse.fsy

%{

(*
Grammar of formulas:

A formula is essentially an arithmetic expression. Such an expression can be made up of:
- a number. E.g., 1234, 42, -9. 
- an identifier. E.g., var(X), var(LIP-20). Note how the in-built function "var" 
  is used to wrap-up the actual name of the variable.  (This is a limitation of
  the current parser.)
- an arithmetic expression. E.g., 1+var(X), min(22,33), ceil(var(X)), avg([var(X);var(Y);22])

Roughly, the following keywords/operators can be used to construct formulas:

num         - An integer
ident       - An identifier. E.g., the name of a variable like relsig or MPK-1. 
var(ident)  - A variable, where ident is the name of the variable. 
+,-,*,/     - Usual arithmetic operators. E.g., 2+3, 44 * var(X)
max,min     - The maximum (minimum) of two expressions. E.g., max(var(X),var(Y)). 
ceil, floor - The ceiling (floor) of an expression. E.g., ceil(var(X)). 
avg         - The average of a list of expressions. E.g., avg( var(X); var(Y); 22; var(Z)*2 ). 

More precisely, the grammar of expressions is given by: 

expr  : NUM                   
      | VAR '(' NUM ')'
      | expr PLUS expr        
      | expr MINUS expr       
      | expr TIMES expr       
      | expr DIV expr         
      | MAX '(' expr COMMA expr ')'
      | MIN '(' expr COMMA expr ')'
      | CEIL '(' expr ')' 
      | FLOOR '(' expr ')'
      | AVG '(' expr_list ')' 
      | '(' expr ')' ;

expr_list : expr
          | expr_list COMMA expr ;
*)

open Expr


%}

%token <int> NUM
%token EOF
%token COMMA LPAREN RPAREN
%token DIV MINUS PLUS TIMES
%token AVG CEIL FLOOR MAX MIN VAR

%start func
%type <expr> func

%left	PLUS MINUS
%left	TIMES DIV
%left   COMMA	

%%

func : expr EOF { $1 }

expr  : NUM                   { Const($1) }
      | VAR LPAREN NUM RPAREN { Var($3) }
      | expr PLUS expr        { Plus($1,$3) }
      | expr MINUS expr       { Minus($1,$3) }
      | expr TIMES expr       { Times($1,$3) }
      | expr DIV expr         { Div($1,$3) }
      | MAX LPAREN expr COMMA expr RPAREN { Max($3,$5) }
      | MIN LPAREN expr COMMA expr RPAREN { Min($3,$5) }
      | CEIL LPAREN expr RPAREN  { Ceil($3) }
      | FLOOR LPAREN expr RPAREN { Floor($3) }
      | AVG LPAREN expr_list RPAREN { Ave($3) }
      | LPAREN expr RPAREN { $2 }
      ;

expr_list : expr { [$1] }
          | expr_list COMMA expr { $3::$1 }
		  ;


